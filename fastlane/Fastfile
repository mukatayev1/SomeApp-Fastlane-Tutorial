default_platform(:ios)

app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

app_store_connect_api_key_id = "#{ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]}"
app_store_connect_api_issuer_id = "#{ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]}"
app_store_connect_api_p8_contents = File.read("#{ENV["APP_STORE_CONNECT_API_KEY_KEY"]}")

platform :ios do

  desc "match certificates"
  lane :match_certificates do
    match(type: "development", 
    app_identifier: app_identifier
    )
    match(type: "appstore",
    app_identifier: app_identifier
    )
  end

  #Tests
  desc "Run all the tests"
  lane :run_unit_tests do
    scan(
      scheme: "SomeApp",
      clean: true,
      devices: ["iPhone 13 Pro"]
      )
    end

    desc "Build the app"
    lane :gym_app do
      match_certificates
      increment_build_number
      gym(scheme: "SomeApp")
      git_commit(path: "*", message: "Bump build to #{get_build_number}")
    end

    #TestFlight upload
    desc "Upload to TestFlight"
    lane :pilot_to_testflight do
      api_key = app_store_connect_api_key(
        key_id: app_store_connect_api_key_id,
        issuer_id: app_store_connect_api_issuer_id,
        key_content: app_store_connect_api_p8_contents
      )

      pilot(api_key: api_key)
    end

    desc "Upload beta to TestFlight"
    lane :beta_upload do 
      run_unit_tests
      gym_app
      pilot_to_testflight
    end

end
